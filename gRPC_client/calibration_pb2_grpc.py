# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import calibration_pb2 as calibration__pb2


class CalibrationStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.calibrate_modulators = channel.unary_unary(
                '/calibration_interface.Calibration/calibrate_modulators',
                request_serializer=calibration__pb2.CalibrateModulatorsRequest.SerializeToString,
                response_deserializer=calibration__pb2.CalibrateModulatorsReply.FromString,
                )
        self.calibrate_mpn = channel.unary_unary(
                '/calibration_interface.Calibration/calibrate_mpn',
                request_serializer=calibration__pb2.CalibrateMpnRequest.SerializeToString,
                response_deserializer=calibration__pb2.CalibrateMpnReply.FromString,
                )
        self.boost_intensity_calibration = channel.unary_unary(
                '/calibration_interface.Calibration/boost_intensity_calibration',
                request_serializer=calibration__pb2.BoostIntensityCalibrationRequest.SerializeToString,
                response_deserializer=calibration__pb2.BoostIntensityCalibrationReply.FromString,
                )
        self.get_calibration_intervals = channel.unary_unary(
                '/calibration_interface.Calibration/get_calibration_intervals',
                request_serializer=calibration__pb2.GetCalibrationIntervalsRequest.SerializeToString,
                response_deserializer=calibration__pb2.GetCalibrationIntervalsReply.FromString,
                )
        self.set_calibration_intervals = channel.unary_unary(
                '/calibration_interface.Calibration/set_calibration_intervals',
                request_serializer=calibration__pb2.SetCalibrationIntervalsRequest.SerializeToString,
                response_deserializer=calibration__pb2.SetCalibrationIntervalsReply.FromString,
                )


class CalibrationServicer(object):
    """Missing associated documentation comment in .proto file."""

    def calibrate_modulators(self, request, context):
        """Start the IM1, IM2 calibration 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def calibrate_mpn(self, request, context):
        """Start the mean photon number calibration routine. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def boost_intensity_calibration(self, request, context):
        """Boost intensity for calibration in case of high loss. This interface is
        called from End Node Qphase. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_calibration_intervals(self, request, context):
        """Get the frequency of a calibration algorithm execution 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def set_calibration_intervals(self, request, context):
        """Set the frequency of a calibration algorithm execution 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CalibrationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'calibrate_modulators': grpc.unary_unary_rpc_method_handler(
                    servicer.calibrate_modulators,
                    request_deserializer=calibration__pb2.CalibrateModulatorsRequest.FromString,
                    response_serializer=calibration__pb2.CalibrateModulatorsReply.SerializeToString,
            ),
            'calibrate_mpn': grpc.unary_unary_rpc_method_handler(
                    servicer.calibrate_mpn,
                    request_deserializer=calibration__pb2.CalibrateMpnRequest.FromString,
                    response_serializer=calibration__pb2.CalibrateMpnReply.SerializeToString,
            ),
            'boost_intensity_calibration': grpc.unary_unary_rpc_method_handler(
                    servicer.boost_intensity_calibration,
                    request_deserializer=calibration__pb2.BoostIntensityCalibrationRequest.FromString,
                    response_serializer=calibration__pb2.BoostIntensityCalibrationReply.SerializeToString,
            ),
            'get_calibration_intervals': grpc.unary_unary_rpc_method_handler(
                    servicer.get_calibration_intervals,
                    request_deserializer=calibration__pb2.GetCalibrationIntervalsRequest.FromString,
                    response_serializer=calibration__pb2.GetCalibrationIntervalsReply.SerializeToString,
            ),
            'set_calibration_intervals': grpc.unary_unary_rpc_method_handler(
                    servicer.set_calibration_intervals,
                    request_deserializer=calibration__pb2.SetCalibrationIntervalsRequest.FromString,
                    response_serializer=calibration__pb2.SetCalibrationIntervalsReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'calibration_interface.Calibration', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Calibration(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def calibrate_modulators(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calibration_interface.Calibration/calibrate_modulators',
            calibration__pb2.CalibrateModulatorsRequest.SerializeToString,
            calibration__pb2.CalibrateModulatorsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def calibrate_mpn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calibration_interface.Calibration/calibrate_mpn',
            calibration__pb2.CalibrateMpnRequest.SerializeToString,
            calibration__pb2.CalibrateMpnReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def boost_intensity_calibration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calibration_interface.Calibration/boost_intensity_calibration',
            calibration__pb2.BoostIntensityCalibrationRequest.SerializeToString,
            calibration__pb2.BoostIntensityCalibrationReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_calibration_intervals(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calibration_interface.Calibration/get_calibration_intervals',
            calibration__pb2.GetCalibrationIntervalsRequest.SerializeToString,
            calibration__pb2.GetCalibrationIntervalsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def set_calibration_intervals(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calibration_interface.Calibration/set_calibration_intervals',
            calibration__pb2.SetCalibrationIntervalsRequest.SerializeToString,
            calibration__pb2.SetCalibrationIntervalsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
